# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: Publish Docker Images

on:
  workflow_dispatch:
  workflow_call:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: "streetsidesoftware/cspell"
  DEBUG: true

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: CSpell Version
        run: |
          export CSPELL_VERSION=$(jq -r ".dependencies.cspell | sub(\"[_^]\"; \"\")" package.json)
          echo CSPELL_VERSION=$CSPELL_VERSION >> $GITHUB_ENV

      - name: Log in to the Container registry
        uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@69f6fc9d46f2f8bf0d5491e4aabe0bb8c6a4678a
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ env.CSPELL_VERSION }}
          labels: |
            org.opencontainers.image.title=cspell
            org.opencontainers.image.description=CSpell command line spell checker

      - name: Log Docker metadata
        env:
          META: $${{ toJSON(steps.meta.outputs) }}
        run: echo "$META"

      # Setup custom tags and labels
      # - reuse meta data from docker/metadata-action where possible
      # - This contains is published as `streetsidesoftware/cspell` instead of `cspell-cli`
      # - The version matches `cspell` and NOT `cspell-cli`.
      - name: Calc metadata
        id: alt_meta
        env:
          TAGS: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.CSPELL_VERSION }}
          IMAGE_LABELS: |
            org.opencontainers.image.title=cspell
            org.opencontainers.image.description=CSpell command line spell checker
            org.opencontainers.image.url=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.url'] }}
            org.opencontainers.image.source=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.source'] }}
            org.opencontainers.image.version=${{ env.CSPELL_VERSION }}
            org.opencontainers.image.created=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            org.opencontainers.image.revision=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
            org.opencontainers.image.licenses=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.licenses'] }}

        run: |
          echo 'DOCKER_TAGS<<TAGS'"
          $TAGS
          TAGS" >> $GITHUB_ENV
          echo 'DOCKER_LABELS<<LABELS'"
          $IMAGE_LABELS
          LABELS" >> $GITHUB_ENV

      - name: Echo Meta Data
        run: |
          echo tags = "$DOCKER_TAGS"
          echo labels = "$DOCKER_LABELS"
          echo debug = "$DEBUG"

      - name: Build and push Docker image
        uses: docker/build-push-action@1cb9d22b932e4832bb29793b7777ec860fc1cde0
        if: ${{ env.DEBUG !== 'true' }}
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
# cspell:ignore opencontainers
